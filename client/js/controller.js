


function runQuery() {
    var json = getExportJson();
    console.log($("#report-submit").val());
    $.ajax({
        url: $("#report-submit").val(),
        data: json,
        timeout: 60000000,
        type: 'POST',
        dataType: 'json',
        success: function (response) {

            console.log('in runQuery SUCCESS');
            console.log(response);
            if (response.status === 0) {
                //TODO display the error message in response.message
            } else {
                var data = tableize(response.headers, response.data);
                //console.log(data);
                $("#preview-table-div").replaceWith(data);
                $('#preview-table').DataTable();
                $( "#datatable" ).show();
            }


        },
        error: function (request, error) {
            alert("Request: " + JSON.stringify(request));
        }
    });
}

function tableize(headers, rows) {
    // datatable.net seems to expect full on <table><tr><td></td></tr></table> markup
    var table = '<div id="preview-table-div"><table id="preview-table" class="display"><thead>';
    headers.forEach(function (header, index) {table +=  '<th>' + header + '</th>';});
    table += '</thead><tbody>'
    rows.forEach(function (row, index) {
        table += '<tr>'
        row.forEach(function(cell, index) {
            table +=  '<td>' + cell + '</td>';
        });
        table += '</tr>'
    });
    table += '</tbody></table></div>'
    return table;
}

function tableize_col(col, index) {
    return '<td>' + col + '</td>';
}

function saveExportJson() {
    var json = getExportJson();
    console.log('in SaveExportJson');
    console.log(json);
    var filename=json.reportname + ".json";
    var blob = new Blob([ JSON.stringify(json)], {type: 'text/json;charset=utf-8;'});
    if (navigator.msSaveBlob) { // IE 10+
        navigator.msSaveBlob(blob, filename);
    } else {
        var link = document.createElement("a");
        if (link.download !== undefined) { // feature detection
            // Browsers that support HTML5 download attribute
            var url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }
}

function getExportJson() {
    var struct = {};
    struct.reportname = 'unnamed_report';
    var columns =[];
    $('.column-selector').each(function() {
        if ($( this ).prop( 'checked' )) {
            var table = {};
            table.instrument = $(this).closest('.panel').attr('id').substr(6);
            table.field = $(this).prop('id');
            columns.push(table);
        }
    });

    // ok, now that we have the column specification, build up the filters.
    // the inputs generated by the REDCap API call have a quirky naming convention
    // process the results in the order returned, looking for these four names:
    // field_name, limiter_operator[], limiter_value[], and limiter_connector[]
    // we get back an array of objects with name: and value: as the two properties
    // this is the target format:
    //        "filters": [{
    //                 "instrument": "person",
    //                 "field": "record_id",
    //                 "operator": "equals",
    //                 "param": "1",
    //                 "boolean": "AND"
    //             }
    var formdata = $("#export-repeating").serializeArray();
    var filters = [];
    var filter;
    // console.log($("#report-submit").val());
    formdata.forEach(function (item, index) {

        if (item.name === 'instrument') {
            filter = {};
            filter.instrument = item.value;
        } else if (item.name === 'field_name') {
            filter.field = item.value;
        } else if (item.name === 'limiter_operator[]') {
            filter.operator = item.value;
        } else if (item.name === 'limiter_value[]') {
            filter.param = item.value;
        } else if (item.name === 'limiter_connector[]') {
            filter.boolean = item.value;
            filters.push(Object.assign({}, filter));
        } else if (item.name === 'report_name') {
            struct.reportname = item.value;
        }
    });

    struct.project = "standard";
    struct.preview = "false";
    struct.columns = columns;
    struct.filters = filters;
    console.log(struct);
    return struct;

}